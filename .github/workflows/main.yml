name: Build Jellyfin FolderCollections Plugin

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup .NET 8 (with cache)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: |
            src/FolderCollectionsPlugin.csproj
            **/packages.lock.json

      # Optional: nur nuget.org verwenden
      - name: Ensure only nuget.org is used
        shell: bash
        run: |
          set -euo pipefail
          for name in $(dotnet nuget list source | awk '/Enabled/{print prev} {prev=$0}' | sed 's/^[ *]*//'); do
            if [ "$name" != "nuget.org" ] && [ "$name" != "nuget" ]; then
              dotnet nuget remove source "$name" || true
            fi
          done
          dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget || true
          echo "=== Active NuGet sources ==="
          dotnet nuget list source

      - name: Restore (nuget.org only, with retry)
        shell: bash
        run: |
          set -euo pipefail
          attempts=6
          for i in $(seq 1 $attempts); do
            if dotnet restore src/FolderCollectionsPlugin.csproj \
                 --no-cache --nologo --ignore-failed-sources \
                 -s https://api.nuget.org/v3/index.json; then
              echo "Restore succeeded on attempt $i"
              exit 0
            fi
            if [ $i -lt $attempts ]; then
              delay=$((2**(i-1)))
              echo "Restore failed (attempt $i). Retrying in ${delay}sâ€¦"
              sleep $delay
            fi
          done
          echo "Restore failed after $attempts attempts."
          exit 1

      - name: Build (Release)
        run: dotnet build src/FolderCollectionsPlugin.csproj -c Release --no-restore --nologo

      - name: Publish (framework-dependent)
        run: dotnet publish src/FolderCollectionsPlugin.csproj -c Release -o publish --no-restore --no-build --nologo

      # ðŸ”¹ Variante A: Version aus manifest.json holen
      - name: Read version from manifest.json
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          ver=$(jq -r '.version' src/manifest.json)
          if [ -z "$ver" ] || [ "$ver" = "null" ]; then
          echo "No version in manifest.json"; exit 1
          fi
          echo "ver=$ver" >> "$GITHUB_OUTPUT"
          echo "Detected version: $ver"

      - name: Archive plugin (strip server core DLLs)
        shell: bash
        run: |
          set -euo pipefail
          cd publish
          # Vorsichtshalber Kernlibs entfernen (Plugin-DLL bleibt erhalten)
          rm -f MediaBrowser.*.dll Jellyfin.*.dll Emby.*.dll || true
          zipname="FolderCollections_${{ steps.ver.outputs.ver }}.zip"
          zip -r "$zipname" . -q
          mv "$zipname" ../
          cd ..
          echo "ZIP=$zipname" >> "$GITHUB_ENV"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: FolderCollections_${{ steps.ver.outputs.ver }}
          path: ${{ env.ZIP }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Pick ZIP
        id: pick_zip
        shell: bash
        run: |
          set -euo pipefail
          zipfile=$(ls -1 artifacts/**/FolderCollections_*.zip | head -n1)
          [ -z "$zipfile" ] && { echo "No zip found"; exit 1; }
          echo "zipfile=$zipfile" >> "$GITHUB_OUTPUT"
          echo "Using ZIP: $zipfile"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.pick_zip.outputs.zipfile }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
